<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--//////////////////////////////////////////////////////////////////////////////////////-->
    <!-- Common Configuration -->
    <context:component-scan base-package="ru.extas"/>
    <jpa:repositories base-package="ru.extas.server" entity-manager-factory-ref="entityManagerFactory"
                      transaction-manager-ref="transactionManager"/>
    <bean id="extaAuditorAwareBean" class="ru.extas.model.common.ExtaAuditorAware"/>
    <jpa:auditing auditor-aware-ref="extaAuditorAwareBean"/>
    <!-- Exception translation bean post processor -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <!--//////////////////////////////////////////////////////////////////////////////////////-->
    <!--Cache Configuration-->
    <!--<cache:annotation-driven cache-manager="cacheManager"/>-->
    <!-- generic cache manager -->
    <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches">
            <set>
                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="userByLogin"/>
            </set>
        </property>
    </bean>

    <!--//////////////////////////////////////////////////////////////////////////////////////-->
    <!-- Default UI locale -->
    <bean class="java.util.Locale">
        <constructor-arg value="ru"/>
        <constructor-arg value="RU"/>
    </bean>

    <!-- Часовой пояс клиента -->
    <bean id="clientTimeZoneFactory" scope="singleton" class="ru.extas.web.util.InternalizationUtils"/>
    <bean id="clientTimeZone" scope="session" class="org.joda.time.DateTimeZone"
          factory-bean="clientTimeZoneFactory" factory-method="getClientTimeZone">
        <aop:scoped-proxy/>
    </bean>

    <!--Информация о версии и билде -->
    <context:property-placeholder location="classpath:version.properties" ignore-unresolvable="true"/>
    <bean id="application.version" class="java.lang.String">
        <constructor-arg value="${extacrm.app.version}"/>
    </bean>
    <bean id="application.build.timestamp" class="java.lang.String">
        <constructor-arg value="${extacrm.build.timestamp}"/>
    </bean>


    <!--//////////////////////////////////////////////////////////////////////////////////////-->
    <!-- Data Source -->
    <context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true"/>
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
    <property name="driverClassName" value="${db.jdbc.driver}"/>
        <property name="url" value="${db.jdbc.url}"/>
        <property name="username" value="${db.jdbc.username}"/>
        <property name="password" value="${db.jdbc.password}"/>
        <property name="connectionProperties" value="characterEncoding=UTF-8"/>
    </bean>

    <!--//////////////////////////////////////////////////////////////////////////////////////-->
    <!-- Проверяет версию БД и выполняет миграцию если необходимо -->
    <bean id="flyway" class="org.flywaydb.core.Flyway" init-method="migrate" depends-on="processEngineConfiguration" lazy-init="false">
        <property name="dataSource" ref="dataSource"/>
        <property name="initOnMigrate" value="true"/>
        <property name="validateOnMigrate" value="false"/>
    </bean>

    <!--//////////////////////////////////////////////////////////////////////////////////////-->
    <!--Bean Validation config-->
    <bean id="validator"
          class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>

    <!--//////////////////////////////////////////////////////////////////////////////////////-->
    <!-- JPA Configuration -->
    <context:property-placeholder location="classpath:persistence.properties" ignore-unresolvable="true"/>
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="extacrmJpaUnit"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter"/>
        </property>
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.EclipseLinkJpaDialect"/>
        </property>
        <!--<property name="loadTimeWeaver">-->
        <!--<bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>-->
        <!--</property>-->
        <property name="jpaProperties">
            <props>
                <prop key="eclipselink.target-database">${db.name}</prop>
                <prop key="eclipselink.ddl-generation">${jpa.ddl-generation}</prop>
                <prop key="eclipselink.ddl-generation.output-mode">${jpa.generation.output-mode}</prop>
                <prop key="eclipselink.logging.level">${jpa.logging.level}</prop>
                <prop key="eclipselink.logging.level.sql">${jpa.logging.level}</prop>
            </props>
        </property>
    </bean>

    <!--<bean class="javax.persistence.PersistenceUnitUtil" factory-bean="entityManagerFactory"-->
          <!--factory-method="getPersistenceUnitUtil"/>-->
    <!-- Transaction config-->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <bean id="sharedTransactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
        <!--<property name="isolationLevelName" value="ISOLATION_READ_UNCOMMITTED"/>-->
        <!--<property name="timeout" value="30"/>-->
    </bean>

    <!--//////////////////////////////////////////////////////////////////////////////////////-->
    <!-- BPMN Process Engine Configuration -->
    <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
    <property name="dataSource" ref="dataSource"/>
        <property name="transactionManager" ref="transactionManager"/>
        <property name="databaseSchemaUpdate" value="true"/>
        <property name="jobExecutorActivate" value="false"/>
        <property name="deploymentResources" value="classpath*:bpm/*.bpmn"/>
        <property name="jpaEntityManagerFactory" ref="entityManagerFactory"/>
        <property name="jpaHandleTransaction" value="true"/>
        <property name="jpaCloseEntityManager" value="true"/>
        <property name="history" value="full"/>
        <property name="customSessionFactories">
            <list>
                <bean class="ru.extas.server.bpm.security.ExtaEntityManagerFactory"/>
            </list>
        </property>
    </bean>
    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
        <property name="processEngineConfiguration" ref="processEngineConfiguration"/>
        <aop:scoped-proxy/>
    </bean>
    <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService">
        <aop:scoped-proxy/>
    </bean>
    <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService">
        <aop:scoped-proxy/>
    </bean>
    <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService">
        <aop:scoped-proxy/>
    </bean>
    <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService">
        <aop:scoped-proxy/>
    </bean>
    <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService">
        <aop:scoped-proxy/>
    </bean>
    <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService">
        <aop:scoped-proxy/>
    </bean>
    <bean id="formService" factory-bean="processEngine" factory-method="getFormService">
        <aop:scoped-proxy/>
    </bean>
    <!-- Устанавливает глобальное окружение Activiti для запроса -->
    <bean id="activitiAuthFilter" class="ru.extas.web.bpm.ActivitiAuthFilter"/>
    <!-- Обработчик пользовательской задачи в рамках бизнес процесса -->
    <bean id="defUserTaskListener" class="ru.extas.server.bpm.DefaultUserTaskListener">
        <aop:scoped-proxy/>
    </bean>

    <!--//////////////////////////////////////////////////////////////////////////////////////-->
    <!-- Shiro Security Congiguration -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <bean id="shiroCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"/>
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="myRealm"/>
        <!-- By default the servlet container sessions will be used.  Uncomment this line
             to use security's native sessions (see the JavaDoc for more): -->
        <!-- <property name="sessionMode" value="native"/> -->
        <property name="cacheManager" ref="shiroCacheManager"/>
    </bean>
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
    <!-- security datasource: -->
    <bean id="myRealm" class="ru.extas.security.UserRealm">
        <property name="credentialsMatcher" ref="credMatcher"/>
    </bean>

    <bean id="credMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="SHA-256"/>
        <property name="hashIterations" value="1024"/>
        <property name="storedCredentialsHexEncoded" value="false"/>
    </bean>

</beans>